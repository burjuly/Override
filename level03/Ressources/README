Видим, что программа запрашивает пароль (необходим int)

В main вызывается функция test с двумя аргументами - введенный пользователем пароль и 322424845 (0x1337d00d):

0x080488ca <+112>: movl $0x1337d00d,0x4(%esp)
0x080488d2 <+120>: mov %eax,(%esp)
0x080488d5 <+123>: call 0x8048747 <test>

(gdb) x/10xw $esp # ( b *0x080488d5)
0xffffd6f0: 0x1337d008 0x1337d00d 0xf7fceff4 0xf7e5ede5

В функции test из 322424845 вычитается введенный пользователем пароль и результат сравнивается с числами от 1 до 21, после чего происходит вызов decrypt с результатом сравнения.

0x08048755 <+14>: sub %eax,%ecx
0x08048757 <+16>: mov %ecx,%eax
0x08048759 <+18>: mov %eax,-0xc(%ebp)
0x0804875c <+21>: cmpl $0x15,-0xc(%ebp)

0x15 = 21
В случае если разность не попадает в этот диапазон, то decrypt вызывается с рандомным числом в качестве аргумента

0x08048760 <+25>: ja 0x804884a <test+259> #jump если число больше 21
...
0x0804884a <+259>: call 0x8048520 <rand@plt>
0x0804884f <+264>: mov %eax,(%esp)
0x08048852 <+267>: call 0x8048660 <decrypt>

for i in {322424824..322424844..1}; do print $i; (echo $i; echo -ne '\n') | /home/users/level03/level03; done

(echo 322424827; cat) | ./level03

cat /home/users/level04/.pass
kgv3tkEb9h2mLkRsPkXRfc2mHbjMxQzvb2FrgKkf


PS: Другой вариант решения:
Знаем про сравнение двух строк: зашифрованной (Q}|u`sfg~sf{}|a3) XOR 'число' и Congratulations!.
Шифрование происходит посимвольно с помощью XOR. Обратная для XOR операция - XOR.
Сделаем XOR для соответствющих (i-ых) символов в строках и получим 'число' для дельты с константой из main:
'Q' = 0x51, 'C' = 0x43, 0x51 ^ 0x43 = 0x12 (18)
